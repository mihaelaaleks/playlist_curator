import os

from fastapi import APIRouter, Depends, HTTPException
from fastapi.responses import JSONResponse
from dotenv import load_dotenv
from fastapi.security import OAuth2PasswordBearer
from typing import Optional
import requests

#environment variable setup
load_dotenv()

# spotify-specific vars
CLIENT_ID = os.environ.get("SPOTIFY_CLIENT_ID")
REDIRECT_URI = os.environ.get("SPOTIFY_REDIRECT_API")

SPOTIFY_AUTH_URL = "https://accounts.spotify.com/authorize"
SPOTIFY_TOKEN_URL = "https://accounts.spotify.com/api/token"
SCOPE = "user-read-private user-read-email" #add more later for playlist specific

# OAuth2 scheme for token dependency
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

router = APIRouter(
    prefix="/auth_spotify",
    tags=["auth_spotify"],
    responses={404: {"description": "Not found"}},
)

async def get_current_token(token: str = Depends(oauth2_scheme)) -> str:
    """Dependency to get current access token"""
    if not token: 
        raise HTTPException(
            status_code=401, 
            detail="Not authenticated",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return token

@router.get("/login")
async def login(code_challenge: str):
    """
    Initiate Spotify OAuth2 PKCE flow

    Args: 
        code_challenge: The code challenge generated by the frontend
    """
    try:
        params = {
            "client_id": CLIENT_ID,
            "response_type": "code",
            "redirect_uri": REDIRECT_URI,
            "code_challenge_method": "S256",
            "code_challenge": code_challenge,
            "scope": "user-read-private user-read-email user-library-read user-top-read playlist-modify-private playlist-modify-public"
        }
        
        # Construct authorization URL
        auth_url = f"{SPOTIFY_AUTH_URL}?{requests.compat.urlencode(params)}"
        return JSONResponse(content={"auth_url": auth_url})
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))
    

@router.post("/token")
async def get_token(code: str, code_verifier: str):
    """
    Exchange authorization code for access token using PKCE
    
    Args:
        code: The authorization code returned by Spotify
        code_verifier: The original code verifier generated by the frontend
    """
    try:
        token_data = {
            "client_id": CLIENT_ID,
            "grant_type": "authorization_code",
            "code": code,
            "redirect_uri": REDIRECT_URI,
            "code_verifier": code_verifier,
        }

        headers = {
            "Content-Type": "application/x-www-form-urlencoded"
        }

        response = requests.post(SPOTIFY_TOKEN_URL, data=token_data, headers=headers)
        
        if response.status_code != 200:
            error_description = response.json().get("error_description", "Unknown error")
            raise HTTPException(status_code=response.status_code, detail=error_description)
            
        return response.json()
    except requests.exceptions.RequestException as e:
        raise HTTPException(status_code=400, detail=str(e))

@router.post("/refresh")
async def refresh_token(refresh_token: str):
    """
    Refresh access token
    
    Args:
        refresh_token: The refresh token from the previous token response
    """
    try:
        token_data = {
            "grant_type": "refresh_token",
            "refresh_token": refresh_token,
            "client_id": CLIENT_ID,
        }

        headers = {
            "Content-Type": "application/x-www-form-urlencoded"
        }

        response = requests.post(SPOTIFY_TOKEN_URL, data=token_data, headers=headers)
        
        if response.status_code != 200:
            error_description = response.json().get("error_description", "Unknown error")
            raise HTTPException(status_code=response.status_code, detail=error_description)
            
        return response.json()
    except requests.exceptions.RequestException as e:
        raise HTTPException(status_code=400, detail=str(e))